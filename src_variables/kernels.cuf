module kernels
   
   use cudafor
    implicit NONE
    
    double precision, device :: rho_d
    contains


    attributes(global) subroutine copySharedMem(odata, idata, indice_i, indice_j)

      double precision, intent(out) :: odata(640,640)
      double precision, intent(in) :: idata(320,320)
      integer , intent(in) :: indice_i, indice_j

      real, shared :: tile(32, 32)
      integer :: x, y, j,TILE_DIM, BLOCK_ROWS = 8

      TILE_DIM = blockDim%x

      x = (blockIdx%x-1) * TILE_DIM + threadIdx%x
      y = (blockIdx%y-1) * TILE_DIM + threadIdx%y

      do j = 0, TILE_DIM-1, BLOCK_ROWS
         tile(threadIdx%x, threadIdx%y+j) = idata(x,y+j)
      end do

      call syncthreads()

      do j = 0, TILE_DIM-1, BLOCK_ROWS
         odata(x+(320*(indice_i-1)),y+j+(320*(indice_j-1))) = tile(threadIdx%x, threadIdx%y+j)          
      end do
  end subroutine copySharedMem

  attributes(global) subroutine VuextraReduction(CalculationResults, finalResult)
      double precision, intent(in) :: CalculationResults(10,4)
      double precision, intent(out) :: finalResult
      double precision, shared :: arrayCopy(10,4)

      arrayCopy(threadIdx%x,threadIdx%y) = CalculationResults(threadIdx%x,threadIdx%y)
      !print *, CalculationResults(threadIdx%x,threadIdx%y)
      

      call syncthreads()

      if(threadIdx%x .le. 5) arrayCopy(threadIdx%x,threadIdx%y) = arrayCopy(threadIdx%x,threadIdx%y)+ arrayCopy(threadIdx%x+5,threadIdx%y)

      call syncthreads()

      if(threadIdx%x .eq. 2) arrayCopy(threadIdx%x,threadIdx%y) = arrayCopy(threadIdx%x,threadIdx%y)+ arrayCopy(threadIdx%x+2,threadIdx%y) + arrayCopy(threadIdx%x+3,threadIdx%y)
      if(threadIdx%x .eq. 1) arrayCopy(threadIdx%x,threadIdx%y) = arrayCopy(threadIdx%x,threadIdx%y)+ arrayCopy(threadIdx%x+2,threadIdx%y) 

      call syncthreads()

      if(threadIdx%x .eq. 1) arrayCopy(threadIdx%x,threadIdx%y) = arrayCopy(threadIdx%x,threadIdx%y)+ arrayCopy(threadIdx%x+1,threadIdx%y) 

      call syncthreads()

      if(threadIdx%x .eq. 1 .and. threadIdx%y .eq. 1) finalResult = -(1.d0/(8.d0*datan(1.d0)*rho_d))*(arrayCopy(1,1)-arrayCopy(1,2)-arrayCopy(1,3)+arrayCopy(1,4))
   end
end module kernels